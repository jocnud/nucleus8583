= Benchmark Code =
Small unit test for JPos performance measurement.

== Read / Pack ==
{{{
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.GenericPackager;

import org.junit.Before;
import org.junit.Test;

public class PackStressTest {
	private GenericPackager jposPackager;

	private OutputStream nullOut;

	@Before
	public void initialize() throws Exception {
		jposPackager = new GenericPackager("src/test/resources/META-INF/jpos.xml");

		nullOut = new OutputStream() {
			public void write(int b) throws IOException {
				// do nothing
			}
		};
	}

	private long measureJPos(int loops) throws Exception {
		long startDate = System.currentTimeMillis();
		for (int i = loops - 1; i >= 0; --i) {
			ISOMsg msg = new ISOMsg();
			msg.setPackager(jposPackager);

			msg.setMTI("0200");
			msg.set(2, "3125");
			msg.set(7, "0104132431");
			msg.set(11, "1");
			msg.set(12, "132431");
			msg.set(13, "0104");
			msg.set(29, "C01000000");
			msg.set(37, "1762745214");
			msg.set(39, "00");
			msg.set(48, "01000abcdefghijkl                    ");

			msg.pack(nullOut);
		}
		long endDate = System.currentTimeMillis();

		return endDate - startDate;
	}

	@Test
	public void shouldVeryFast() throws Exception {
		int loops = 10000; // changed to 10000, 100000, 1000000, 10000000

		long elapsedJPos = measureJPos(loops);
		System.out.println("[pack] [jpos] loops / sec = "
				+ ((long)loops * 1000L / elapsedJPos));
	}
}
}}}

== Write / Unpack ==
{{{
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.GenericPackager;

import org.junit.Before;
import org.junit.Test;

public class UnpackStressTest {
	private GenericPackager jposPackager;

	private InputStream ipacked;

	@Before
	public void initialize() throws Exception {
		jposPackager = new GenericPackager("src/test/resources/META-INF/jpos.xml");

		final byte[] bpacked = "0200423800080A010000133125         01041324310000011324310104C010000001762745214  0003701000abcdefghijkl                    "
				.getBytes();

		ipacked = new InputStream() {
			private int readerIndex = 0;

			private int remaining = bpacked.length;

			public int read() throws IOException {
				if (remaining == 0) {
					return -1;
				}

				int readb = bpacked[readerIndex] & 0xFF;

				++readerIndex;
				--remaining;

				return readb;
			}

			@Override
			public int read(byte b[], int off, int len) throws IOException {
				if (remaining == 0) {
					return -1;
				}

				if (remaining >= len) {
					System.arraycopy(bpacked, readerIndex, b, off, len);

					readerIndex += len;
					remaining -= len;

					return len;
				}

				try {
					System.arraycopy(bpacked, readerIndex, b, off, remaining);
				} catch (Throwable e) {
					System.err.println("error: " + "bpacked.length = "
							+ bpacked.length + ", readerIndex = ");
				}

				remaining = 0;
				readerIndex = bpacked.length;

				return len;
			}

			public void close() throws IOException {
				readerIndex = 0;
				remaining = bpacked.length;
			}
		};
	}

	private long measureJPos(int loops) throws Exception {
		long startDate = System.currentTimeMillis();
		for (int i = 0; i < loops; ++i) {
			ISOMsg msg = new ISOMsg();
			msg.setPackager(jposPackager);
			
			msg.unpack(ipacked);
			
			ipacked.close();
		}
		long endDate = System.currentTimeMillis();

		return endDate - startDate;
	}

	@Test
	public void shouldVeryFast() throws Exception {
		int loops = 10000; // to be changed

		long elapsedJPos = measureJPos(loops);

		System.out.println("[unpack] [jpos] loops / sec = "
				+ ((long)loops * 1000L / elapsedJPos));
	}
}
}}}